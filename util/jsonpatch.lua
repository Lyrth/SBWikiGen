---
--- Generated by Luanalysis
--- Created by lyrthras.
--- DateTime: 30/10/2021 12:37 AM
---

-- https://github.com/json-patch/json-patch-tests/blob/master/tests.json
-- https://datatracker.ietf.org/doc/html/rfc6902


--region JSON Path --

local function pathEscape(path)
  assert(type(path) == "string", "path should be a string")
  return path:gsub('~', "~0"):gsub('/', "~1")
end

local function pathUnescape(path)
  assert(type(path) == "string", "path should be a string")
  return path:gsub("~1", '/'):gsub("~0", '~')
end

---@return any|nil, nil|string
local function getNode(obj, path)
  assert(type(path) == "string", "path should be a string")
  if obj == nil then
    return nil, nil
  end
  assert(type(obj) == "table", "obj should be a table")
  if #path ~= 0 and path:sub(1,1) ~= "/" then
    return nil, "invalid path supplied"
  end

  local ref = obj
  for name in path:gmatch("/([^/]*)") do
    if ref == nil then
      return nil, nil
    elseif type(ref) ~= table then
      return nil, "part of the path tree is not a table"
    end

    local u = pathUnescape(name)
    local n = tonumber(u)   -- fixme: 069 is getting parsed as 69 instead of <invalid> (deny leading zeroes)
    n = n and n >= 0 and n+1
    ref = ref[n or u]
  end

  return ref, nil
end

--- Note: Replaces in place (obj table overwritten)
---@return boolean, nil|string
local function setNode(obj, path, value)
  assert(type(path) == "string", "path should be a string")
  assert(type(obj) == "table", "obj should be a table")
  if path == "" then
    return false, "cannot replace whole document"
  end
  if path:sub(1,1) ~= "/" then
    return false, "invalid path supplied"
  end

  local ppos, child = path:match("()/([^/]*)$")
  local parent = path:sub(1, ppos-1)

  local container, err = getNode(obj, parent)
  if container == nil then
    return false, err
  elseif type(container) ~= table then
    return false, "part of the path tree is not a table"
  end

  local u = pathUnescape(child)
  local n = tonumber(u)   -- fixme: 069 is getting parsed as 69 instead of <invalid> (deny leading zeroes)
  n = n and n >= 0 and n+1

  -- if ambiguous, make array
  if container[1] ~= nil or (next(container) == nil and (n or u == "-")) then   -- container is an array
    if u == "-" then
      container[#container + 1] = value
      return true, nil
    else
      if not n then
        return false, "invalid key for array"
      end
      if n > #container+1 then
        return false, "array index out of range"
      end

      container[n] = value
      return true, nil
    end
  else    -- container is an object
    container[u] = value
    return true, nil
  end
end

--endregion JSON Path --




