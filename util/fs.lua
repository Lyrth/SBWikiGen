---
--- Generated by Luanalysis
--- Created by lyrthras.
--- DateTime: 23/06/2021 11:34 AM
---

local ffi = require "ffi"
local lfs = require "lfs"

local util = {}


function util.isValidPath(path)
  return (path:find("[<>:|?`\"]") or path:find("$(") or path:find("&&")) == nil
end


-- Directory Walking --
local function winDirTree(dir, filesOnly, extension)
  if not util.isValidPath(dir) or (extension and not util.isValidPath(extension)) then
    error("Invalid dir/extension passed.")
  end
  dir = util.normalizePath(dir)
  dir = dir:gsub("/","\\")
  if extension and extension:sub(1,1) == "." then extension = extension:sub(2) end    -- remove leading .

  return io.popen("dir /B "..(filesOnly and "/A-D " or "").."/s \""..dir..(extension and "\\*."..extension.."\"" or "\"")):lines()
end

local function nixDirTree(dir, filesOnly, extension)
  if not util.isValidPath(dir) or (extension and not util.isValidPath(extension)) then
    error("Invalid dir/extension passed.")
  end
  if extension and extension:sub(1,1) == "." then extension = extension:sub(2) end    -- remove leading .
  dir = util.normalizePath(dir)

  return io.popen("find \""..dir.."\" "..(filesOnly and "-type f " or "")..(extension and '-name "*.'..extension..'"' or "")):lines()
end

local function fallbackDirTree(dir, filesOnly, extension)
  if dir:sub(-1) == "/" then dir = dir:sub(1, -2) end                   -- remove trailing /
  if extension and extension:sub(1,1) == "." then extension = extension:sub(2) end    -- remove leading .
  dir = util.normalizePath(dir)

  local function yieldtree(dir)
    for entry in lfs.dir(dir) do
      if entry ~= "." and entry ~= ".." then
        local fn = dir.."/"..entry
        local attr = lfs.attributes(fn)
        local isDir = attr.mode == "directory"
        if not filesOnly or not isDir then
          if not isDir and (not extension or entry:sub(-#extension) == extension) or isDir then
            coroutine.yield(fn)
          end
        end

        if isDir then
          yieldtree(fn)
        end
      end
    end
  end

  return coroutine.wrap(function() yieldtree(dir) end)
end

---@type fun(dir:string, filesOnly:boolean, extension:string|nil): fun(): string
util.dirTree = (ffi.os == 'Windows' and winDirTree)
    or (ffi.os == 'Other' and fallbackDirTree)
    or (nixDirTree)



---@param path string
---@param base string
function util.normalizePath(path, base)
  local hasTrailingSlash = path:find("[\\/]$") ~= nil
  path = base and (base .. "/" .. path) or path
  path = path:gsub("\\","/"):gsub("/+","/")
  while path:find("/%./") do
    path = path:gsub("/%./","/")
  end
  while path:gsub("%.%./","\1"):gsub("%.%.$","\2"):gsub("%.%.","\3")
      :gsub("^(/?)\1+","%1"):find("[^/]+/[\1\2]") do
    path = path:gsub("(([^/]+)/%.%./)",function(s,a) return a == ".." and s or "" end)
        :gsub("(([^/]+)/%.%.)$",function(s,a) return a == ".." and s or "" end)
  end
  return path
end

-- /aaa/bbb/ -> /aaa/bbb/
-- /aaa/bb/ccd -> /aaa/bb/
function util.getParentDir(path)
  return util.normalizePath(path):gsub("^(.-)([^/]*)$",function(a,b) return b == ".." and a.."../" or a end)
end


return util
