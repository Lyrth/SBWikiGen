---
--- Generated by Luanalysis
--- Created by Lyr.
--- DateTime: 6/20/2021 11:20 PM
---

--[=[
--  https://openresty.org/en/download.html
--  https://luapower.com/luajit/download
--]=]


--[=[
local _success, req = pcall(require, "luajit-request")
if not _success then _success, req = pcall(require, "luajit-request.init") end
if not _success then error("luajit-request not found") end

local response, err, msg = req.send("https://starbounder.org/mediawiki/api.php?action=parse&page=Timber&prop=wikitext&formatversion=2" --[[, {
  method = "POST",
  data = {
    hello = "world"
  }
}]])


if not response then
  print(err, msg)
end

print(response.code)
--print(response.body)

--]=]


--[[
https://starboundarcana-staging.fandom.com/api.php?action=query&format=json&prop=revisions&titles=Main%20Page&rvprop=timestamp%7Cuser%7Cslotsha1%7Ccomment&rvslots=main&rvlimit=1

// site name
{
  "action": "query",
  "format": "json",
  "meta": "siteinfo",
  "siprop": "general|namespaces|namespacealiases|statistics"
}

// get image sha1
{
  "action": "query",
  "format": "json",
  "prop": "imageinfo",
  "titles": "File:Magician's Table Icon.png",
  "iiprop": "sha1",
  "iilimit": "1"
}
--]]



package.path = package.path .. ";./lib/?/init.lua"
local util = require "util"

local files = 0
local dirs = 0

local f = ""
for filename in util.dirTree("../src/.///.//", true, "lua") do
  print("["..filename.."]")
  files = files + 1;
  f = filename
end


io.write(string.format("Files: %d, Dirs: %d, Total %d\n", files, dirs, files + dirs))


-- TODO: process name, desc, category, rarity color codes: "^#9e6b55;Magician's Table^reset;"
-- TODO: map categories
-- TODO: teaches, taughtBy
-- TODO: map stats

-- TODO: normalize stuff like effectsss images etc

-- TODO: for mask, mask opacity apply, set to mannequin image

-- TODO: NOTE: armor colorOptions ignores alpha if alpha not included (24-bit)


-- TODO check if upstream modified

---                                          ,-> process images \
--- read -> normalize structure -> normalize paths -> build dbs -> crosslink (normalize names) -> fetch api -> parse templates -> output

